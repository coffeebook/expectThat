{"body":"ExpectThat\r\n=======\r\n\r\n**ExpectThat** is a CoffeeScript library that helps you write expressive, self-documenting unit tests.\r\nExpectThat currently supports Mocha, Pavlov, QUnit, and Jasmine.\r\n\r\nThe goals of ExpectThat are:\r\n\r\n* to make the unit test code speak for itself (no need to write the same thing in a comment or test name).\r\n* to provide human readable unit test assertions.\r\n* to leverage existing test frameworks, while at the same time adapting them to CoffeScript in new ways.\r\n\r\nHow To Get It\r\n=======\r\n\r\nFor Node.js + Jasmine-Node use NPM\r\n\r\n    npm install expectThat.jasmine-node\r\n\r\nOnce installed, the following command can be run\r\n\r\n    expectThat.jasmine-node '<relative path to spec files>'\r\n\r\nor see the jasmine-node example in the expectThat solution and test it out by running the following command\r\n\r\n    node runspecs.js\r\n\r\nFor Node.js + Mocha use NPM\r\n\r\n    npm install expectThat.mocha\r\n\r\nOnce installed, add require('expectThat.mocha'); to the top of the spec files and run mocha as you normally would. i.e.\r\n\r\n    mocha '<spec file>' --reporter spec\r\n\r\nFor Visual Studio use NuGet\r\n\r\n    install-package expectThat.Pavlov\r\n\r\n    install-package expectThat.QUnit\r\n\r\n    install-package expectThat.Jasmine\r\n\r\n    install-package expectThat.Mocha\r\n\r\nGetting Started\r\n=======\r\n\r\nWith ExpectThat, you can write unit tests like this:\r\n\r\nOne object equals or does not equal another:\r\n\r\n    expectThat -> 1.should equal 1\r\n\r\n    expectThat -> 1.shouldnt equal 2\r\n\r\nAn object is true or false\r\n\r\n    expectThat -> (\"b\"+\"ar\" is \"bar\").should be true\r\n\r\n    expectThat -> (\"foo\" is \"baz\").shouldnt be true\r\n\r\n    expectThat -> (\"b\"+\"az\" is \"bar\").should be false\r\n\r\n    expectThat -> (\"b\" + \"az\" is \"baz\").shouldnt be false\r\n\r\n    expectThat -> (null is null).should be true\r\n\r\n    expectThat -> (\"\" is null).should be false\r\n\r\n    expectThat -> (undefined is undefined).should be true\r\n\r\n    expectThat -> (\"\" is undefined).should be false\r\n\r\nA number is or is not greater than or less than another\r\n\r\n    expectThat -> 10.1.should be greaterThan 10\r\n\r\n    expectThat -> 9.shouldnt be greaterThan 10\r\n\r\n    expectThat -> 10.1.should be lessThan 10.2\r\n\r\n    expectThat -> 10.1.shouldnt be lessThan 10\r\n\r\nA number is or is not greater than or equal to or less than or equal to another\r\n\r\n    expectThat -> 10.should be greaterThanOrEqual to 10\r\n\r\n    expectThat -> 9.9.shouldnt be greaterThanOrEqual to 10\r\n\r\n    expectThat -> (10.0).should be lessThanOrEqual to 10\r\n\r\n    expectThat -> 10.1.shouldnt be lessThanOrEqual to 10\r\n\r\nAn object is strictly equal (i.e. is or ===) to another\r\n\r\n    testFn = ->\r\n    testFn2 = ->\r\n\r\n    expectThat -> testFn.should be strictlyEqual to testFn\r\n\r\n    expectThat -> testFn.shouldnt be strictlyEqual to testFn2\r\n\r\nA function throws an exception\r\n\r\n    expectThat -> (-> throw \"test exception\").should throwException\r\n\r\nA function throws an exception with a specific exception message (Note: The exception message must match exactly.)\r\n\r\n    expectThat -> (-> throw \"test exception\").should throwException \"test exception\"\r\n\r\nMost assertions can be created using the `be` and/or `to` keywords:\r\n\r\n    expectThat -> 1.shouldnt be equal to 2\r\n\r\n    expectThat -> (\"b\"+\"ar\" is \"bar\").should be true\r\n\r\n    expectThat -> (\"b\" + \"az\" is \"baz\").shouldnt be false\r\n\r\nWhile most of the time it is desirable to allow the code to dictate the test name, there may be times when you wish to\r\nhave more control. Because of this, version 0.2.1.0+ provides a way to explicitly state the test name. Here's an example:\r\n\r\n    expectThat \"Some Test Name\", -> foo.should equal \"bar\"\r\n\r\nExamples\r\n=======\r\n\r\nThe following are examples of ExpectThat in use with Pavlov.js (https://github.com/mmonteleone/pavlov),\r\nQUnit (https://github.com/jquery/qunit), and Jasmine (https://github.com/pivotal/jasmine/) as well as Mocha (http://visionmedia.github.com/mocha/) respectively.\r\nNote: More extensive examples can be found in the example folder ( https://github.com/dmohl/expectThat/tree/master/example ).\r\n\r\n**Pavlov:**\r\n\r\n    pavlov.specify \"expectThat Specifications\", ->\r\n        describe \"When testing should equal\", ->\r\n            foo = undefined\r\n            before ->\r\n                foo = \"bar\"\r\n            after ->\r\n                foo = \"baz\"\r\n            expectThat -> foo.should equal \"bar\"\r\n            expectThat -> foo.shouldnt equal \"baz\"\r\n            expectThat -> (foo + \"test\").shouldnt equal \"bartest2\"\r\n            expectThat -> foo.should be equal to \"bar\"\r\n            expectThat -> foo.shouldnt be equal to \"bah\"\r\n\r\n**QUnit:**\r\n\r\n    module \"When testing should equal\"\r\n\r\n    foo = \"bar\"\r\n\r\n    expectThat -> foo.should equal \"bar\"\r\n    expectThat -> foo.shouldnt equal \"baz\"\r\n    expectThat -> (foo + \"test\").shouldnt equal \"bartest2\"\r\n    expectThat -> foo.should be equal to \"bar\"\r\n    expectThat -> foo.shouldnt be equal to \"bah\"\r\n\r\n**Jasmine and Mocha (BDD):**\r\n\r\n    describe \"Example Specifications\", ->\r\n        foo = \"bar\"\r\n        describe \"When testing should equal\", ->\r\n            expectThat -> foo.should equal \"bar\"\r\n        describe \"When testing shouldnt equal\", ->\r\n            expectThat -> foo.shouldnt equal \"baz\"\r\n        describe \"When testing for true\", ->\r\n            expectThat -> (foo is \"bar\").should be true\r\n            expectThat -> (foo is \"baz\").shouldnt be true\r\n        describe \"When testing for false\", ->\r\n            expectThat -> (foo is \"baz\").should be false\r\n            expectThat -> (foo is \"bar\").shouldnt be false\r\n\r\nExpectThat also supports custom matchers. Any matcher that evaluates to true/false can be created. Here's an example of\r\na custom matcher for Pavlov. Examples for QUnit and Jasmine are available in the example folder of this project - https://github.com/dmohl/expectThat/tree/master/example ):\r\n\r\n    ((expectThat) ->\r\n        myCustomMatchers =\r\n            atleastTwoGreaterThan: (expected) ->\r\n                \"assertionType\": \"atleastTwoGreaterThan\"\r\n                \"expected\": expected\r\n                \"expr\": (actual, expected) -> actual >= expected + 2\r\n\r\n        expectThat.util.extend pavlov.api, myCustomMatchers\r\n    ) expectThat\r\n\r\nUsing ExpectThat with JavaScript\r\n=======\r\n\r\nWhile the syntax of ExpectThat is especially well suited and specifically designed for CoffeeScript, it can also be used\r\nin JavaScript. Here's a Pavlov example:\r\n\r\n    pavlov.specify(\"expectThat Specifications\", function() {\r\n        describe(\"When testing should equal\", function() {\r\n            var foo = \"bar\";\r\n            expectThat(function() {\r\n                foo.should(equal(\"bar\"));\r\n            });\r\n            expectThat(function() {\r\n                (foo + \"test\").should(equal(\"bartest\"));\r\n            });\r\n        });\r\n    });\r\n","tagline":"A CoffeeScript Unit Testing/Assertion Library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Expectthat"}