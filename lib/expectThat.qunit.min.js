var expectThatApi;expectThatApi=function(a){return{version:"0.2.0.2",init:function(a){var b;return b=this,Object.prototype.should=function(c){return b.evaluateAssertion(a,!0,this,c)},Object.prototype.shouldnt=function(c){return b.evaluateAssertion(a,!1,this,c)},this},executeThrowAssertion:function(a,b,c){return typeof c.expected!="undefined"?a.throwsException(b):a.throwsException()},executeEqualToAssertion:function(a,b,c){return a?b.isEqualTo(c):b.isNotEqualTo(c)},executeBooleanAssertion:function(a,b,c,d,e){var f;if(typeof d.expr!="function")throw"The provided custom assertion expression for "+d.assertionType+" is invalid.\nCustom assertion expressions should be defined as:\n(actual, expected) -> <some function using actual and expression>.";return f=e.assert(d.expr(b,c)),a?f.isTrue():f.isFalse()},executeAssertion:function(a,b,c,d,e,f,g){if(a===null||typeof a=="undefined")return;return typeof c!="undefined"?c==="throw"?this.executeThrowAssertion(a,e,f):this.executeBooleanAssertion(b,d,e,f,g):this.executeEqualToAssertion(b,a,e)},evaluateAssertion:function(a,b,c,d){var e,f,g,h;return h=d,g=d,typeof d=="function"&&(g=d()),typeof g!="undefined"&&g!==null&&(f=g.assertionType,typeof g.expected!="undefined"&&(h=g.expected)),e=a.assert(c),this.executeAssertion(e,b,f,c,h,g,a)}}}(expectThatApi||(expectThatApi={})),function(a){return a.util={extend:function(a,b){var c;for(c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}},this}(expectThatApi||(expectThatApi={})),function(a){return a.api={be:function(a){return a},to:function(a){return a},equal:function(a){return a},throwException:function(a){return{assertionType:"throw",expected:a}},extendApi:function(b,c){var d;return Object.prototype.should||a.init(c),d=b.toString().match(/^[^\{]*\{((.*\s*)*)\}/m)[1],d.replace(/(\^\s+|\s)+$/g,"").replace(/[(\^(?)]/g," ").replace(/.should/g," should").replace(/return/g," ").replace(/shouldnt/g,"shouldn't").replace(/void 0/g,"null").replace(/!= null/g,"").replace(/typeof null !== "undefined" && null !== null/g,"undefined")}},a.util.extend(a,a.api)}(expectThatApi||(expectThatApi={})),function(a){return a.api.extendedMatchers={greaterThan:function(a){return{assertionType:"greaterThan",expected:a,expr:function(a,b){return a>b}}},lessThan:function(a){return{assertionType:"lessThan",expected:a,expr:function(a,b){return a<b}}},greaterThanOrEqual:function(a){return{assertionType:"greaterThanOrEqual",expected:a,expr:function(a,b){return a>=b}}},lessThanOrEqual:function(a){return{assertionType:"lessThanOrEqual",expected:a,expr:function(a,b){return a<=b}}},strictlyEqual:function(a){return{assertionType:"strictlyEqual",expected:a,expr:function(a,b){return a===b}}}},a.util.extend(a,a.api.extendedMatchers)}(expectThatApi||(expectThatApi={})),function(a,b,c){return a.api.qunit={},a.assertionProvider={},a.assertionProvider={assert:function(a){return this.actual=a,this},isEqualTo:function(a){return b.qunitOk(this.actual==a,"The expected value was: '"+a+"' and the actual value was: '"+this.actual+"'.")},isNotEqualTo:function(a){return b.qunitOk(this.actual!=a,"The expected value was: '"+a+"' and the actual value was: '"+this.actual+"'.")},isTrue:function(){return b.qunitOk(this.actual,"The expected value was: '{expected}' and the actual value was: '"+this.actual+"'.")},isFalse:function(){return b.qunitOk(!this.actual,"The expected value was: '{expected}' and the actual value was: '"+this.actual+"'.")},throwsException:function(a){try{return this.actual(),b.qunitOk(!1,"The function did not throw an exception")}catch(c){return typeof a!="undefined"&&a!==null?b.qunitOk(c===a,"The function threw an exception, however, the error message did not match the provided\nexpected error message. The expected error message was '"+a+"' and the actual error message was\n'"+c+"'."):b.qunitOk(!0,"The actual error message was '"+c+"'.")}}},a.util.extend(a.api.qunit,a.assertionProvider),a.api.qunit={expectThat:function(c){var d;return d=a.api.extendApi(c,a.assertionProvider),b.test(d,c)}},a.util.extend(a,a.api.qunit),c.expectThat=a.expectThat,c.qunitEqual=b.equal,c.qunitNotEqual=b.notEqual,c.qunitOk=b.ok,c.qunitRaises=b.raises,b.be=a.api.be,b.to=a.api.to,b.throwException=a.api.throwException,a.util.extend(b,a.api.extendedMatchers),c.equal=a.api.equal,c.expectThat}(expectThatApi||(expectThatApi={}),window,window)